
# Kubenewrepo

#   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    paths-ignore:
    - "**.tfstate"
    - "**.tfstate.encrypted"
    branches: [ "main" ]
  pull_request:

env:
  AWS_REGION: us-east-1

  
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd EKS
        terraform init

  
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd EKS
        terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply/destroy 
      run: |
       cd EKS
       terraform destroy -auto-approve

    - name: Commit Repository File
      uses: badgerhobbs/terraform-state@v2
      with:
          operation: upload
          location: repository
          directory: EKS

    - name: Terraform accessnoded  
      run: |
       cd EKS
       cd ConfigurationFiles
       sudo apt-get update
       curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
       chmod +x ./kubectl
       sudo mv ./kubectl /usr/local/bin/kubectl
       kubectl version --client
       aws --version
       aws sts get-caller-identity
       aws eks list-access-entries --cluster-name my-eks-cluster
       aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
       #kubectl apply -f https://k8s.io/examples/application/deployment.yaml --validate=false
       #kubectl expose deployment nginx-deployment --type=NodePort --name=nginxservice
       #In this script, adding eks access entries is not included so once eks and its nodes successfully created , we need to manual create access entry for eks cluster to grant access for the current user, only then we will get access to perform tasks like 'kubectl get nodes' , kubectl apply/delete on the eks nodes
       #after creating access entries need to rerun the job , make sure terraform state file is saved properly either in s3 bucket or in any storage 
       kubectl delete -f deployment.yaml
       kubectl delete -f service.yaml
       sleep 20
       kubectl get nodes
       sleep 10
       kubectl get pods
       sleep 10
