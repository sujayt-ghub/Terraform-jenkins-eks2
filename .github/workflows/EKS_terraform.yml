
# Kubenewrepo

#  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    paths-ignore:
    - "**.tfstate"
    - "**.tfstate.encrypted"
    branches: [ "main" ]
  pull_request:

env:
  AWS_REGION: us-east-1

  
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd EKS
        terraform init

  
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd EKS
        terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply/destroy 
      run: |
       cd EKS
       terraform destroy -auto-approve

    - name: Commit Repository File
      uses: badgerhobbs/terraform-state@v2
      with:
          operation: upload
          location: repository
          directory: EKS

    - name: Terraform Apply/destroy 
      run: |
       cd EKS
       cd ConfigurationFiles
       sudo apt-get update
       # apt-transport-https may be a dummy package; if so, you can skip that package
       sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
       # If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
       sudo mkdir -p -m 755 /etc/apt/keyrings
       curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
       sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
       # This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
       echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
       sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly
       sudo apt-get update
       sudo apt-get install -y kubectl
       aws eks update-kubeconfig --name my-eks-cluster
       kubectl apply -f deployment.yaml
       kubectl apply -f service.yaml
       sleep 20
       kubectl get pods
       sleep 10
